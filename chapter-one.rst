AWK入门指南
========================

Awk是一种方便且表达能力强的程序设计语言，可应用于各种计算和数据处理任务。本章是个入门指南，让你能够尽快地开始编写你自己的程序。第二章将描述整个语言，而剩下的章节将向你展示如何使用Awk来解决许多不同方面的问题。纵观全书，我们尽量选择了一些对你有用、有趣并且有指导意义的实例。

1.1 起步
--------------

有用的awk程序往往很简短，仅仅一两行。假设你有一个名为emp.data的文件，其中包含员工的姓名、薪资（美元/小时）以及小时数，一个员工一行数据，如下所示：

======== ======== ========
Beth      4.00     0
Dan       3.75     0
kathy     4.00     10
Mark      5.00     20
Mary      5.50     22
Susie     4.25     18
======== ======== ========

现在你想打印出工作时间超过零小时的员工的姓名和工资（薪资乘以时间）。这种任务对于awk来说就是小菜一碟。输入这个命令行就可以了：::

    awk '$3 >0 { print $1, $2 * $3 }' emp.data

你应该会得到如下输出：

| Kathy 40
| Mark 100
| Mary 121   
| Susie 76.5


该命令行告诉系统执行引号内的awk程序，从输入文件emp.data获取程序所需的数据。引号内的部分是个完整的awk程序，包含单个模式-行为语句。模式$3>0用于匹配第三列大于0的输入行，行为::

    { print $1, $2 * $3 }

打印每个匹配行的第一列以及第二第三列的乘积。

如果你想打印出还没工作过的员工的姓名，则输入命令行：::

    awk '$3 == 0 { print $1 }' emp.data

这里，模式$3 == 0 匹配第三列等于0的行，行为::

    { print $1 }

打印该行的第一列。

当你阅读本书时，应该尝试执行与修改示例程序。大多数程序都很简短，所以你能快速理解awk是如何工作的。在Unix系统上，以上两个事务在终端里看起来是这样的：
    
| $ awk '$3 > 0 { print $1, $2 * $3 }' emp.data  
| Kathy 40  
| Mark 100  
| Mary 121  
| Susie 76.5  
| $ awk '$3 == 0 { print $1 }' emp.data  
| Beth  
| Dan  
| $

行首的$是系统提示符，也许在你的机器上不一样。

**Running an AWK Program**


.. toctree::
    :hidden:

